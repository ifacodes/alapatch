import { returnFromList } from '../utils/functions';

export default function build_store(patch, timbre1, timbre2, vocoder) {
  return {
    ...prepare_patch(patch),
    ...prepare_timbre(timbre1),
    ...prepare_timbre(timbre2, true),
    ...prepare_vocoder(vocoder),
  };
}

function prepare_patch(object) {
  return {
    unusedPatch: {
      id: 'unusedPatch',
      scaleKey: object.scale_key,
      scaleType: object.scale_type,
      keyboardOctave: object.keyboard_octave,
      arpSwitch: object.arp_on_off,
    },
    patch: {
      id: 'patch',
      mode: returnFromList(
        object.voice_mode,
        'Single',
        null,
        'Multiple',
        'Vocoder'
      ),
      name: object.program_name,
    },
    delay: {
      id: 'delay',
      type: returnFromList(
        object.delay_type,
        'Stereo Delay',
        'Cross Delay',
        'L/R Delay'
      ),
      tempoSync: object.delay_sync,
      syncNote: returnFromList(
        object.delay_timebase,
        '1/32',
        '1/24',
        '1/16',
        '1/12',
        '3/32',
        '1/8',
        '1/6',
        '3/16',
        '1/4',
        '1/3',
        '3/8',
        '1/2',
        '2/3',
        '3/4',
        '1/1'
      ),
      delayTime: object.delay_time,
      delayDepth: object.delay_depth,
    },
    modfx: {
      id: 'modfx',
      type: returnFromList(
        object.mod_type,
        'Chorus/Flanger',
        'Ensemble',
        'Phaser'
      ),
      lfoSpeed: object.mod_lfo_speed,
      effectDepth: object.mod_depth,
    },
    eq: {
      id: 'eq',
      lowFrequency: returnFromList(
        object.eq_low_freq,
        40,
        50,
        60,
        80,
        100,
        120,
        140,
        160,
        180,
        200,
        220,
        240,
        260,
        280,
        300,
        320,
        340,
        360,
        380,
        400,
        420,
        440,
        460,
        480,
        500,
        600,
        700,
        800,
        900,
        1000
      ),
      lowGain: object.eq_low_gain - 64,
      highFrequency: returnFromList(
        object.eq_hi_freq,
        1.0,
        1.25,
        1.5,
        1.75,
        2.0,
        2.25,
        2.5,
        2.75,
        3.0,
        3.25,
        3.5,
        3.75,
        4.0,
        4.25,
        4.5,
        4.75,
        5.0,
        5.25,
        5.5,
        5.75,
        6.0,
        7.0,
        8.0,
        9.0,
        10.0,
        11.0,
        12.0,
        14.0,
        16.0,
        18.0
      ),
      highGain: object.eq_hi_gain - 64,
    },
    arpeggA: {
      id: 'arpeggA',
      tempo: object.arp_tempo,
      resolution: returnFromList(
        object.arp_resolution,
        '1/24',
        '1/16',
        '1/12',
        '1/8',
        '1/6',
        '1/4'
      ),
      gate: object.arp_gate_time,
      type: returnFromList(
        object.arp_type,
        'Up',
        'Down',
        'Alternate 1',
        'Alternate 2',
        'Random',
        'Trigger'
      ),
      range: object.arp_range,
    },
    arpeggB: {
      id: 'arpeggB',
      latch: object.arp_latch,
      swing: object.arp_swing,
      keySync: object.arp_key_sync,
      lastStep: object.arp_trigger_length,
      target: object.arp_target,
      pattern: object.arp_trigger_pattern,
    },
  };
}

function prepare_timbre(object, timbre2 = false) {
  const num = timbre2 ? 2 : 1;
  if (!object) return null;
  return {
    [`unusedTimbre${num}`]: {
      id: `unusedTimbre${num}`,
      midiChannel: object[`t${num}_midi_channel`],
      keyPriority: object[`t${num}_key_priority`],
      filterVelSense: object[`t${num}_filter_vel_sense`],
      ampSwitch: object[`t${num}_amp_switch`],
      ampVelSense: object[`t${num}_amp_vel_sense`],
    },
    [`vco${timbre2 ? num + 1 : num}`]: {
      id: `vco${timbre2 ? num + 1 : num}`,
      waveform: returnFromList(
        object[`t${num}_osc_1_wave`],
        'Saw',
        'Square',
        'Triangle',
        'Sine',
        'Vox Wave',
        'DWGS',
        'Noise',
        'Audio In'
      ),
      dwgsOrModType: returnFromList(
        object[`t${num}_osc_1_dgws`],
        'SynSine1',
        'SynSine2',
        'SynSine3',
        'SynSine4',
        'SynSine5',
        'SynSine6',
        'SynSine7',
        'SynBass1',
        'SynBass2',
        'SynBass3',
        'SynBass4',
        'SynBass5',
        'SynBass6',
        'SynBass7',
        'SynWave1',
        'SynWave2',
        'SynWave3',
        'SynWave4',
        'SynWave5',
        'SynWave6',
        'SynWave7',
        'SynWave8',
        'SynWave9',
        '5thWave1',
        '5thWave2',
        '5thWave3',
        'Digi1',
        'Digi2',
        'Digi3',
        'Digi4',
        'Digi5',
        'Digi6',
        'Digi7',
        'Digi8',
        'Endless',
        'E.Piano1',
        'E.Piano2',
        'E.Piano3',
        'E.Piano4',
        'Organ1',
        'Organ2',
        'Organ3',
        'Organ4',
        'Organ5',
        'Organ6',
        'Organ7',
        'Clav1',
        'Clav2',
        'Guitar1',
        'Guitar2',
        'Guitar3',
        'Bass1',
        'Bass2',
        'Bass3',
        'Bass4',
        'Bass5',
        'Bell1',
        'Bell2',
        'Bell3',
        'Bell4',
        'Voice1',
        'Voice2',
        'Voice3',
        'Voice4'
      ),
      waveMod: object[`t${num}_osc_1_ctrl_1`],
      lfoMod: object[`t${num}_osc_1_ctrl_2`],
    },
    [`vco${num * 2}`]: {
      id: `vco${num * 2}`,
      waveform: returnFromList(
        object[`t${num}_osc_2_wave`],
        'Saw',
        'Square',
        'Triangle'
      ),
      dwgsOrModType: returnFromList(
        object[`t${num}_osc_2_mod_select`],
        'Off',
        'Ring',
        'Sync',
        'RingSync'
      ),
      waveMod: object[`t${num}_osc_2_semitone`],
      lfoMod: object[`t${num}_osc_2_tune`],
    },
    [`mixer${num}`]: {
      id: `mixer${num}`,
      vol1: object[`t${num}_osc_1_level`],
      vol2: object[`t${num}_osc_2_level`],
      vol3: object[`t${num}_noise_level`],
    },
    [`pitch${num}`]: {
      id: `pitch${num}`,
      voiceAssign: returnFromList(
        object[`t${num}_assign_mode`],
        'Mono',
        'Poly',
        'Unison'
      ),
      triggerMode: returnFromList(
        object[`t${num}_trigger_mode`],
        'Single',
        'Multiple'
      ),
      transpose: object[`t${num}_transpose`] - 64,
      tune: object[`t${num}_tune`] - 64,
      unisonDetune: object[`t${num}_unison_detune`],
      portamento: object[`t${num}_portamento`],
      bendRange: object[`t${num}_bend_range`] - 64,
      vibratoIntensity: object[`t${num}_vibrato_int`] - 64,
    },
    [`filter${num}`]: {
      id: `filter${num}`,
      filterType: returnFromList(
        object[`t${num}_filter_type`],
        '-24db Low Pass',
        '-12db Low Pass',
        'Band Pass',
        'High Pass'
      ),
      cutoff: object[`t${num}_filter_cutoff`],
      resonance: object[`t${num}_filter_resonance`],
      egIntensity: object[`t${num}_filter_eg_intensity`] - 64,
      keyboardTrack: object[`t${num}_filter_key_track`] - 64,
    },
    [`amp${num}`]: {
      id: `amp${num}`,
      ampLevel: object[`t${num}_amp_level`],
      panpot: object[`t${num}_amp_panpot`],
      ampTrack: object[`t${num}_amp_key_track`] - 64,
      distortion: object[`t${num}_amp_distortion`],
    },
    [`eg${timbre2 ? num + 1 : num}`]: {
      id: `eg${timbre2 ? num + 1 : num}`,
      attack: object[`t${num}_eg_1_attack`],
      decay: object[`t${num}_eg_1_decay`],
      sustain: object[`t${num}_eg_1_sustain`],
      release: object[`t${num}_eg_1_release`],
      egReset: object[`t${num}_eg_1_reset`],
    },
    [`eg${num * 2}`]: {
      id: `eg${num * 2}`,
      attack: object[`t${num}_eg_2_attack`],
      decay: object[`t${num}_eg_2_decay`],
      sustain: object[`t${num}_eg_2_sustain`],
      release: object[`t${num}_eg_2_release`],
      egReset: object[`t${num}_eg_2_reset`],
    },
    [`lfo${timbre2 ? num + 1 : num}`]: {
      id: `lfo${timbre2 ? num + 1 : num}`,
      waveform: returnFromList(
        object[`t${num}_lfo_1_wave`],
        'Saw',
        'Square 1',
        'Triangle',
        'Sample & Hold'
      ),
      keySync: returnFromList(
        object[`t${num}_lfo_1_key_sync`],
        'Off',
        'Timbre',
        'Voice'
      ),
      tempoSync: object[`t${num}_lfo_1_tempo_sync`],
      frequency: object[`t${num}_lfo_1_frequency`],
      syncNote: returnFromList(
        object[`t${num}_lfo_1_sync_note`],
        '1/1',
        '3/4',
        '2/3',
        '1/2',
        '3/8',
        '1/3',
        '1/4',
        '3/16',
        '1/6',
        '1/8',
        '3/32',
        '1/12',
        '1/16',
        '1/24',
        '1/32'
      ),
    },
    [`lfo${num * 2}`]: {
      id: `lfo${num * 2}`,
      waveform: returnFromList(
        object[`t${num}_lfo_2_wave`],
        'Saw',
        'Square 2',
        'Sine',
        'Sample & Hold'
      ),
      keySync: returnFromList(
        object[`t${num}_lfo_2_key_sync`],
        'Off',
        'Timbre',
        'Voice'
      ),
      tempoSync: object[`t${num}_lfo_2_tempo_sync`],
      frequency: object[`t${num}_lfo_2_frequency`],
      syncNote: returnFromList(
        object[`t${num}_lfo_2_sync_note`],
        '1/1',
        '3/4',
        '2/3',
        '1/2',
        '3/8',
        '1/3',
        '1/4',
        '3/16',
        '1/6',
        '1/8',
        '3/32',
        '1/12',
        '1/16',
        '1/24',
        '1/32'
      ),
    },
    [`patches${num}`]: {
      id: `patches${num}`,
      patch1: {
        source: returnFromList(
          object[`t${num}_patch_1_src`],
          'Filter EG',
          'Amp EG',
          'LFO 1',
          'LFO 2',
          'Velocity',
          'Keyboard Track',
          'Pitch Bend',
          'Mod Wheel'
        ),
        destination: returnFromList(
          object[`t${num}_patch_1_dest`],
          'Pitch',
          'OSC 2 Tune',
          'OSC 1 Control 1',
          'Noise Level',
          'Cutoff',
          'Amp',
          'Pan',
          'LFO 2 Frequency'
        ),
        modIntensity: object[`t${num}_patch_1_intensity`],
      },
      patch2: {
        source: returnFromList(
          object[`t${num}_patch_2_src`],
          'Filter EG',
          'Amp EG',
          'LFO 1',
          'LFO 2',
          'Velocity',
          'Keyboard Track',
          'Pitch Bend',
          'Mod Wheel'
        ),
        destination: returnFromList(
          object[`t${num}_patch_2_dest`],
          'Pitch',
          'OSC 2 Tune',
          'OSC 1 Control 1',
          'Noise Level',
          'Cutoff',
          'Amp',
          'Pan',
          'LFO 2 Frequency'
        ),
        modIntensity: object[`t${num}_patch_2_intensity`],
      },
      patch3: {
        source: returnFromList(
          object[`t${num}_patch_3_src`],
          'Filter EG',
          'Amp EG',
          'LFO 1',
          'LFO 2',
          'Velocity',
          'Keyboard Track',
          'Pitch Bend',
          'Mod Wheel'
        ),
        destination: returnFromList(
          object[`t${num}_patch_3_dest`],
          'Pitch',
          'OSC 2 Tune',
          'OSC 1 Control 1',
          'Noise Level',
          'Cutoff',
          'Amp',
          'Pan',
          'LFO 2 Frequency'
        ),
        modIntensity: object[`t${num}_patch_3_intensity`],
      },
      patch4: {
        source: returnFromList(
          object[`t${num}_patch_4_src`],
          'Filter EG',
          'Amp EG',
          'LFO 1',
          'LFO 2',
          'Velocity',
          'Keyboard Track',
          'Pitch Bend',
          'Mod Wheel'
        ),
        destination: returnFromList(
          object[`t${num}_patch_4_dest`],
          'Pitch',
          'OSC 2 Tune',
          'OSC 1 Control 1',
          'Noise Level',
          'Cutoff',
          'Amp',
          'Pan',
          'LFO 2 Frequency'
        ),
        modIntensity: object[`t${num}_patch_4_intensity`],
      },
    },
  };
}

function prepare_vocoder(object) {
  if (!object) return null;
  return {
    unusedVocoder: {
      midiChannel: object.v_midi_channel,
      egReset2: object.v_eg_2_reset,
      keyPriority: object.v_key_priority,
      filterEFSense: object.v_filter_e_f_sense,
      ampVelSense: object.v_amp_vel_sense,
      eg2attack: object.v_eg_2_attack,
      eg2decay: object.v_eg_2_decay,
      eg2sustain: object.v_eg_2_sustain,
      eg2release: object.v_eg_2_release,
    },
    vco5: {
      id: 'vco5',
      waveform: returnFromList(
        object.v_osc_wave,
        'Saw',
        'Square',
        'Triangle',
        'Sine',
        'Vox Wave',
        'DWGS',
        'Noise',
        'Audio In'
      ),
      dwgsOrModType: returnFromList(
        object.v_osc_dgws,
        'SynSine1',
        'SynSine2',
        'SynSine3',
        'SynSine4',
        'SynSine5',
        'SynSine6',
        'SynSine7',
        'SynBass1',
        'SynBass2',
        'SynBass3',
        'SynBass4',
        'SynBass5',
        'SynBass6',
        'SynBass7',
        'SynWave1',
        'SynWave2',
        'SynWave3',
        'SynWave4',
        'SynWave5',
        'SynWave6',
        'SynWave7',
        'SynWave8',
        'SynWave9',
        '5thWave1',
        '5thWave2',
        '5thWave3',
        'Digi1',
        'Digi2',
        'Digi3',
        'Digi4',
        'Digi5',
        'Digi6',
        'Digi7',
        'Digi8',
        'Endless',
        'E.Piano1',
        'E.Piano2',
        'E.Piano3',
        'E.Piano4',
        'Organ1',
        'Organ2',
        'Organ3',
        'Organ4',
        'Organ5',
        'Organ6',
        'Organ7',
        'Clav1',
        'Clav2',
        'Guitar1',
        'Guitar2',
        'Guitar3',
        'Bass1',
        'Bass2',
        'Bass3',
        'Bass4',
        'Bass5',
        'Bell1',
        'Bell2',
        'Bell3',
        'Bell4',
        'Voice1',
        'Voice2',
        'Voice3',
        'Voice4'
      ),
      waveMod: object.v_osc_ctrl_1,
      lfoMod: object.v_osc_ctrl_1,
    },
    audioIn: {
      id: 'audioIn',
      gate: object.v_audio_in_gate_sense,
      threshold: object.v_audio_in_threshold,
      hpfLevel: object.v_audio_in_hpf_level,
      hpfGate: object.v_audio_in_hpf_gate,
    },
    mixer3: {
      id: 'mixer3',
      vol1: object.v_osc_level,
      vol2: object.v_ext_level,
      vol3: object.v_noise_level,
    },
    pitch3: {
      id: 'pitch3',
      voiceAssign: returnFromList(
        object.v_assign_mode,
        'Mono',
        'Poly',
        'Unison'
      ),
      triggerMode: returnFromList(object.v_trigger_mode, 'Single', 'Multiple'),
      transpose: object.v_transpose - 64,
      tune: object.v_tune - 64,
      unisonDetune: object.v_unison_detune,
      portamento: object.v_portamento_time,
      bendRange: object.v_bend_range - 64,
      vibratoIntensity: object.v_vibrato_int - 64,
    },
    filter3: {
      id: 'filter',
      shift: returnFromList(object.v_filter_shift, 0, 1, 2, -1, -2),
      cutoff: object.v_filter_cutoff,
      resonance: object.v_filter_resonance,
      efSense: object.v_filter_e_f_sense,
    },
    fcMod: {
      id: 'fcMod',
      source: returnFromList(
        object.v_filter_mod_source,
        '---',
        'Amp EG',
        'LFO 1',
        'LFO 2',
        'Velocity',
        'Keyboard Track',
        'Pitch Bend',
        'Mod Wheel'
      ),
      intensity: object.v_filter_intensity,
    },
    eg5: {
      id: 'eg5',
      attack: object.v_eg_1_attack,
      decay: object.v_eg_1_decay,
      sustain: object.v_eg_1_sustain,
      release: object.v_eg_1_release,
      egReset: object.v_eg_1_reset,
    },
    amp3: {
      id: 'amp3',
      ampLevel: object.v_amp_level,
      directLevel: object.v_amp_direct_level,
      ampTrack: object.v_amp_key_track - 64,
      distortion: object.v_amp_direction,
    },
    lfo5: {
      id: 'lfo5',
      waveform: returnFromList(
        object.v_lfo_1_wave,
        'Saw',
        'Square 1',
        'Triangle',
        'Sample & Hold'
      ),
      keySync: returnFromList(
        object.v_lfo_1_key_sync,
        'Off',
        'Timbre',
        'Voice'
      ),
      tempoSync: object.v_lfo_1_tempo_sync,
      frequency: object.v_lfo_1_frequency,
      syncNote: returnFromList(
        object.v_lfo_1_sync_note,
        '1/1',
        '3/4',
        '2/3',
        '1/2',
        '3/8',
        '1/3',
        '1/4',
        '3/16',
        '1/6',
        '1/8',
        '3/32',
        '1/12',
        '1/16',
        '1/24',
        '1/32'
      ),
    },
    lfo6: {
      id: 'lfo6',
      waveform: returnFromList(
        object.v_lfo_2_wave,
        'Saw',
        'Square 2',
        'Sine',
        'Sample & Hold'
      ),
      keySync: returnFromList(
        object.v_lfo_2_key_sync,
        'Off',
        'Timbre',
        'Voice'
      ),
      tempoSync: object.v_lfo_2_tempo_sync,
      frequency: object.v_lfo_2_frequency,
      syncNote: returnFromList(
        object.v_lfo_2_sync_note,
        '1/1',
        '3/4',
        '2/3',
        '1/2',
        '3/8',
        '1/3',
        '1/4',
        '3/16',
        '1/6',
        '1/8',
        '3/32',
        '1/12',
        '1/16',
        '1/24',
        '1/32'
      ),
    },
    levels: {
      id: 'levels',
      level1: object.v_level_1,
      level2: object.v_level_2,
      level3: object.v_level_3,
      level4: object.v_level_4,
      level5: object.v_level_5,
      level6: object.v_level_6,
      level7: object.v_level_7,
      level8: object.v_level_8,
    },
    pans: {
      id: 'pans',
      pan1: object.v_pan_1 - 64,
      pan2: object.v_pan_2 - 64,
      pan3: object.v_pan_3 - 64,
      pan4: object.v_pan_4 - 64,
      pan5: object.v_pan_5 - 64,
      pan6: object.v_pan_6 - 64,
      pan7: object.v_pan_7 - 64,
      pan8: object.v_pan_8 - 64,
    },
  };
}
