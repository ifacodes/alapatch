import { returnValue } from '../utils/functions';

export default function saveStoreState(state) {
  switch (state.patch.mode) {
    default:
    case 'Single':
      return [
        {
          ...state_patch({
            unused: { ...state.unusedPatch },
            patch: { ...state.patch },
            arpeggA: { ...state.arpeggA },
            arpeggB: { ...state.arpeggB },
            delay: { ...state.delay },
            modfx: { ...state.modfx },
            eq: { ...state.eq },
          }),
        },
        {
          ...state_timbre({
            unused: { ...state.unusedTimbre1 },
            vco1: { ...state.vco1 },
            vco2: { ...state.vco2 },
            mixer: { ...state.mixer1 },
            pitch: { ...state.pitch1 },
            filter: { ...state.filter1 },
            amp: { ...state.amp1 },
            eg1: { ...state.eg1 },
            eg2: { ...state.eg2 },
            lfo1: { ...state.lfo1 },
            lfo2: { ...state.lfo2 },
            patches: { ...state.patches1 },
          }),
        },
        null,
        null,
      ];
    case 'Multiple':
      return [
        {
          ...state_patch({
            unused: { ...state.unusedPatch },
            patch: { ...state.patch },
            arpeggA: { ...state.arpeggA },
            arpeggB: { ...state.arpeggB },
            delay: { ...state.delay },
            modfx: { ...state.modfx },
            eq: { ...state.eq },
          }),
        },
        {
          ...state_timbre({
            unused: { ...state.unusedTimbre1 },
            vco1: { ...state.vco1 },
            vco2: { ...state.vco2 },
            mixer: { ...state.mixer1 },
            pitch: { ...state.pitch1 },
            filter: { ...state.filter1 },
            amp: { ...state.amp1 },
            eg1: { ...state.eg1 },
            eg2: { ...state.eg2 },
            lfo1: { ...state.lfo1 },
            lfo2: { ...state.lfo2 },
            patches: { ...state.patches1 },
          }),
        },
        {
          ...state_timbre(
            {
              unused: { ...state.unusedTimbre2 },
              vco1: { ...state.vco3 },
              vco2: { ...state.vco4 },
              mixer: { ...state.mixer2 },
              pitch: { ...state.pitch2 },
              filter: { ...state.filter2 },
              amp: { ...state.amp2 },
              eg1: { ...state.eg3 },
              eg2: { ...state.eg4 },
              lfo1: { ...state.lfo3 },
              lfo2: { ...state.lfo4 },
              patches: { ...state.patches2 },
            },
            true
          ),
        },
        null,
      ];
    case 'Vocoder':
      return [
        {
          ...state_patch({
            unused: { ...state.unusedPatch },
            patch: { ...state.patch },
            arpeggA: { ...state.arpeggA },
            arpeggB: { ...state.arpeggB },
            delay: { ...state.delay },
            modfx: { ...state.modfx },
            eq: { ...state.eq },
          }),
        },
        null,
        null,
        {
          ...state_vocoder({
            unused: { ...state.unusedVocoder },
            vco1: { ...state.vco5 },
            audioIn: { ...state.audioIn },
            mixer: { ...state.mixer3 },
            pitch: { ...state.pitch3 },
            filter: { ...state.filter3 },
            fcMod: { ...state.fcMod },
            amp: { ...state.amp3 },
            eg1: { ...state.eg5 },
            lfo1: { ...state.lfo5 },
            lfo2: { ...state.lfo6 },
            levels: { ...state.levels },
            pans: { ...state.pans },
          }),
        },
      ];
  }
}

function state_patch(state) {
  return {
    program_name: state.patch.name,
    arp_trigger_length: state.arpeggB.lastStep,
    arp_trigger_pattern: state.arpeggB.pattern,
    voice_mode: returnValue(state.patch.mode, [
      'Single',
      null,
      'Multiple',
      'Vocoder',
    ]),
    scale_key: state.unused.scaleKey,
    scale_type: state.unused.scaleType,
    arp_tempo: state.arpeggA.tempo,
    arp_on_off: state.unused.arpSwitch,
    arp_latch: state.arpeggB.latch,
    arp_target: state.arpeggB.target,
    arp_key_sync: state.arpeggB.keySync,
    arp_type: returnValue(state.arpeggA.type, [
      'Up',
      'Down',
      'Alternate 1',
      'Alternate 2',
      'Random',
      'Trigger',
    ]),
    arp_range: state.arpeggA.range,
    arp_gate_time: state.arpeggA.gate,
    arp_resolution: returnValue(state.arpeggA.resolution, [
      '1/24',
      '1/16',
      '1/12',
      '1/8',
      '1/6',
      '1/4',
    ]),
    arp_swing: state.arpeggB.swing,
    delay_sync: state.delay.tempoSync,
    delay_timebase: returnValue(state.delay.syncNote, [
      '1/32',
      '1/24',
      '1/16',
      '1/12',
      '3/32',
      '1/8',
      '1/6',
      '3/16',
      '1/4',
      '1/3',
      '3/8',
      '1/2',
      '2/3',
      '3/4',
      '1/1',
    ]),
    delay_time: state.delay.delayTime,
    delay_depth: state.delay.delayDepth,
    delay_type: returnValue(state.delay.type, [
      'Stereo Delay',
      'Cross Delay',
      'L/R Delay',
    ]),
    mod_lfo_speed: state.modfx.lfoSpeed,
    mod_depth: state.modfx.effectDepth,
    mod_type: returnValue(state.modfx.type, [
      'Chorus/Flanger',
      'Ensemble',
      'Phaser',
    ]),
    eq_hi_freq: returnValue(state.eq.highFrequency, [
      1.0,
      1.25,
      1.5,
      1.75,
      2.0,
      2.25,
      2.5,
      2.75,
      3.0,
      3.25,
      3.5,
      3.75,
      4.0,
      4.25,
      4.5,
      4.75,
      5.0,
      5.25,
      5.5,
      5.75,
      6.0,
      7.0,
      8.0,
      9.0,
      10.0,
      11.0,
      12.0,
      14.0,
      16.0,
      18.0,
    ]),
    eq_hi_gain: state.eq.highGain + 64,
    eq_low_freq: returnValue(state.eq.lowFrequency, [
      40,
      50,
      60,
      80,
      100,
      120,
      140,
      160,
      180,
      200,
      220,
      240,
      260,
      280,
      300,
      320,
      340,
      360,
      380,
      400,
      420,
      440,
      460,
      480,
      500,
      600,
      700,
      800,
      900,
      1000,
    ]),
    eq_low_gain: state.eq.lowGain + 64,
    keyboard_octave: state.unused.keyboardOctave,
  };
}

function state_timbre(state, timbre2 = false) {
  const num = timbre2 ? 2 : 1;
  return {
    [`t${num}_midi_channel`]: state.unused.midiChannel,
    [`t${num}_assign_mode`]: returnValue(state.pitch.voiceAssign, [
      'Mono',
      'Poly',
      'Unison',
    ]),
    [`t${num}_eg_2_reset`]: state.eg2.egReset,
    [`t${num}_eg_1_reset`]: state.eg1.egReset,
    [`t${num}_trigger_mode`]: returnValue(state.pitch.triggerMode, [
      'Single',
      'Multiple',
    ]),
    [`t${num}_key_priority`]: state.unused.keyPriority,
    [`t${num}_unison_detune`]: state.pitch.unisonDetune,
    [`t${num}_tune`]: state.pitch.tune + 64,
    [`t${num}_bend_range`]: state.pitch.bendRange + 64,
    [`t${num}_transpose`]: state.pitch.transpose + 64,
    [`t${num}_vibrato_int`]: state.pitch.vibratoIntensity + 64,
    [`t${num}_osc_1_wave`]: returnValue(state.vco1.waveform, [
      'Saw',
      'Square',
      'Triangle',
      'Sine',
      'Vox Wave',
      'DWGS',
      'Noise',
      'Audio In',
    ]),
    [`t${num}_osc_1_ctrl_1`]: state.vco1.waveMod,
    [`t${num}_osc_1_ctrl_2`]: state.vco1.lfoMod,
    [`t${num}_osc_1_dgws`]: returnValue(state.vco1.dwgsOrModType, [
      'SynSine1',
      'SynSine2',
      'SynSine3',
      'SynSine4',
      'SynSine5',
      'SynSine6',
      'SynSine7',
      'SynBass1',
      'SynBass2',
      'SynBass3',
      'SynBass4',
      'SynBass5',
      'SynBass6',
      'SynBass7',
      'SynWave1',
      'SynWave2',
      'SynWave3',
      'SynWave4',
      'SynWave5',
      'SynWave6',
      'SynWave7',
      'SynWave8',
      'SynWave9',
      '5thWave1',
      '5thWave2',
      '5thWave3',
      'Digi1',
      'Digi2',
      'Digi3',
      'Digi4',
      'Digi5',
      'Digi6',
      'Digi7',
      'Digi8',
      'Endless',
      'E.Piano1',
      'E.Piano2',
      'E.Piano3',
      'E.Piano4',
      'Organ1',
      'Organ2',
      'Organ3',
      'Organ4',
      'Organ5',
      'Organ6',
      'Organ7',
      'Clav1',
      'Clav2',
      'Guitar1',
      'Guitar2',
      'Guitar3',
      'Bass1',
      'Bass2',
      'Bass3',
      'Bass4',
      'Bass5',
      'Bell1',
      'Bell2',
      'Bell3',
      'Bell4',
      'Voice1',
      'Voice2',
      'Voice3',
      'Voice4',
    ]),
    [`t${num}_osc_2_mod_select`]: returnValue(state.vco2.dwgsOrModType, [
      'Off',
      'Ring',
      'Sync',
      'RingSync',
    ]),
    [`t${num}_osc_2_wave`]: returnValue(state.vco2.waveform, [
      'Saw',
      'Square',
      'Triangle',
    ]),
    [`t${num}_osc_2_semitone`]: state.vco2.waveMod,
    [`t${num}_osc_2_tune`]: state.vco2.lfoMod,
    [`t${num}_portamento`]: state.pitch.portamento,
    [`t${num}_osc_1_level`]: state.mixer.vol1,
    [`t${num}_osc_2_level`]: state.mixer.vol2,
    [`t${num}_noise_level`]: state.mixer.vol3,
    [`t${num}_filter_type`]: returnValue(state.filter.filterType, [
      '-24db Low Pass',
      '-12db Low Pass',
      'Band Pass',
      'High Pass',
    ]),
    [`t${num}_filter_cutoff`]: state.filter.cutoff,
    [`t${num}_filter_resonance`]: state.filter.resonance,
    [`t${num}_filter_eg_intensity`]: state.filter.egIntensity + 64,
    [`t${num}_filter_vel_sense`]: state.unused.filterVelSense,
    [`t${num}_filter_key_track`]: state.filter.keyboardTrack + 64,
    [`t${num}_amp_level`]: state.amp.ampLevel,
    [`t${num}_amp_panpot`]: state.amp.panpot,
    [`t${num}_amp_switch`]: state.unused.ampSwitch,
    [`t${num}_amp_distortion`]: state.amp.distortion,
    [`t${num}_amp_vel_sense`]: state.unused.ampVelSense,
    [`t${num}_amp_key_track`]: state.amp.ampTrack + 64,
    [`t${num}_eg_1_attack`]: state.eg1.attack,
    [`t${num}_eg_1_decay`]: state.eg1.decay,
    [`t${num}_eg_1_sustain`]: state.eg1.sustain,
    [`t${num}_eg_1_release`]: state.eg1.release,
    [`t${num}_eg_2_attack`]: state.eg2.attack,
    [`t${num}_eg_2_decay`]: state.eg2.decay,
    [`t${num}_eg_2_sustain`]: state.eg2.sustain,
    [`t${num}_eg_2_release`]: state.eg2.release,
    [`t${num}_lfo_1_key_sync`]: returnValue(state.lfo1.keySync, [
      'Off',
      'Timbre',
      'Voice',
    ]),
    [`t${num}_lfo_1_wave`]: returnValue(state.lfo1.waveform, [
      'Saw',
      'Square 1',
      'Triangle',
      'Sample & Hold',
    ]),
    [`t${num}_lfo_1_frequency`]: state.lfo1.frequency,
    [`t${num}_lfo_1_tempo_sync`]: state.lfo1.tempoSync,
    [`t${num}_lfo_1_sync_note`]: returnValue(state.lfo1.syncNote, [
      '1/1',
      '3/4',
      '2/3',
      '1/2',
      '3/8',
      '1/3',
      '1/4',
      '3/16',
      '1/6',
      '1/8',
      '3/32',
      '1/12',
      '1/16',
      '1/24',
      '1/32',
    ]),
    [`t${num}_lfo_2_key_sync`]: returnValue(state.lfo2.keySync, [
      'Off',
      'Timbre',
      'Voice',
    ]),
    [`t${num}_lfo_2_wave`]: returnValue(state.lfo2.waveform, [
      'Saw',
      'Square 2',
      'Sine',
      'Sample & Hold',
    ]),
    [`t${num}_lfo_2_frequency`]: state.lfo2.frequency,
    [`t${num}_lfo_2_tempo_sync`]: state.lfo2.tempoSync,
    [`t${num}_lfo_2_sync_note`]: returnValue(state.lfo2.syncNote, [
      '1/1',
      '3/4',
      '2/3',
      '1/2',
      '3/8',
      '1/3',
      '1/4',
      '3/16',
      '1/6',
      '1/8',
      '3/32',
      '1/12',
      '1/16',
      '1/24',
      '1/32',
    ]),
    [`t${num}_patch_1_dest`]: returnValue(state.patches.patch1.destination, [
      'Pitch',
      'OSC 2 Tune',
      'OSC 1 Control 1',
      'Noise Level',
      'Cutoff',
      'Amp',
      'Pan',
      'LFO 2 Frequency',
    ]),
    [`t${num}_patch_1_src`]: returnValue(state.patches.patch1.source, [
      'Filter EG',
      'Amp EG',
      'LFO 1',
      'LFO 2',
      'Velocity',
      'Keyboard Track',
      'Pitch Bend',
      'Mod Wheel',
    ]),
    [`t${num}_patch_1_intensity`]: state.patches.patch1.modIntensity,
    [`t${num}_patch_2_dest`]: returnValue(state.patches.patch2.destination, [
      'Pitch',
      'OSC 2 Tune',
      'OSC 1 Control 1',
      'Noise Level',
      'Cutoff',
      'Amp',
      'Pan',
      'LFO 2 Frequency',
    ]),
    [`t${num}_patch_2_src`]: returnValue(state.patches.patch2.source, [
      'Filter EG',
      'Amp EG',
      'LFO 1',
      'LFO 2',
      'Velocity',
      'Keyboard Track',
      'Pitch Bend',
      'Mod Wheel',
    ]),
    [`t${num}_patch_2_intensity`]: state.patches.patch2.modIntensity,
    [`t${num}_patch_3_dest`]: returnValue(state.patches.patch3.destination, [
      'Pitch',
      'OSC 2 Tune',
      'OSC 1 Control 1',
      'Noise Level',
      'Cutoff',
      'Amp',
      'Pan',
      'LFO 2 Frequency',
    ]),
    [`t${num}_patch_3_src`]: returnValue(state.patches.patch3.source, [
      'Filter EG',
      'Amp EG',
      'LFO 1',
      'LFO 2',
      'Velocity',
      'Keyboard Track',
      'Pitch Bend',
      'Mod Wheel',
    ]),
    [`t${num}_patch_3_intensity`]: state.patches.patch3.modIntensity,
    [`t${num}_patch_4_dest`]: returnValue(state.patches.patch4.destination, [
      'Pitch',
      'OSC 2 Tune',
      'OSC 1 Control 1',
      'Noise Level',
      'Cutoff',
      'Amp',
      'Pan',
      'LFO 2 Frequency',
    ]),
    [`t${num}_patch_4_src`]: returnValue(state.patches.patch4.source, [
      'Filter EG',
      'Amp EG',
      'LFO 1',
      'LFO 2',
      'Velocity',
      'Keyboard Track',
      'Pitch Bend',
      'Mod Wheel',
    ]),
    [`t${num}_patch_4_intensity`]: state.patches.patch4.modIntensity,
  };
}

function state_vocoder(state) {
  return {
    v_midi_channel: state.unused.midiChannel,
    v_assign_mode: returnValue(state.pitch.assignMode, [
      'Mono',
      'Poly',
      'Unison',
    ]),
    v_eg_2_reset: state.unused.egReset2,
    v_eg_1_reset: state.eg1.egReset,
    v_trigger_mode: returnValue(state.pitch.triggerMode, [
      'Single',
      'Multiple',
    ]),
    v_key_priority: state.unused.keyPriority,
    v_unison_detune: state.pitch.unisonDetune,
    v_tune: state.pitch.tune + 64,
    v_bend_range: state.pitch.bendRange,
    v_transpose: state.pitch.transpose + 64,
    v_vibrato_int: state.pitch.vibratoIntensity,
    v_osc_wave: returnValue(
      state.vco1.waveform,
      'Saw',
      'Square',
      'Triangle',
      'Sine',
      'Vox Wave',
      'DWGS',
      'Noise',
      'Audio In'
    ),
    v_osc_ctrl_1: state.vco1.waveMod,
    v_osc_ctrl_2: state.vco1.lfoMod,
    v_osc_dgws: returnValue(
      state.vco1.dwgsOrModType,
      'SynSine1',
      'SynSine2',
      'SynSine3',
      'SynSine4',
      'SynSine5',
      'SynSine6',
      'SynSine7',
      'SynBass1',
      'SynBass2',
      'SynBass3',
      'SynBass4',
      'SynBass5',
      'SynBass6',
      'SynBass7',
      'SynWave1',
      'SynWave2',
      'SynWave3',
      'SynWave4',
      'SynWave5',
      'SynWave6',
      'SynWave7',
      'SynWave8',
      'SynWave9',
      '5thWave1',
      '5thWave2',
      '5thWave3',
      'Digi1',
      'Digi2',
      'Digi3',
      'Digi4',
      'Digi5',
      'Digi6',
      'Digi7',
      'Digi8',
      'Endless',
      'E.Piano1',
      'E.Piano2',
      'E.Piano3',
      'E.Piano4',
      'Organ1',
      'Organ2',
      'Organ3',
      'Organ4',
      'Organ5',
      'Organ6',
      'Organ7',
      'Clav1',
      'Clav2',
      'Guitar1',
      'Guitar2',
      'Guitar3',
      'Bass1',
      'Bass2',
      'Bass3',
      'Bass4',
      'Bass5',
      'Bell1',
      'Bell2',
      'Bell3',
      'Bell4',
      'Voice1',
      'Voice2',
      'Voice3',
      'Voice4'
    ),
    v_audio_in_hpf_gate: state.audioIn.hpfGate,
    v_portamento_time: state.pitch.portamento,
    v_osc_level: state.mixer.vol1,
    v_ext_level: state.mixer.vol2,
    v_noise_level: state.mixer.vol3,
    v_audio_in_hpf_level: state.audioIn.hpfLevel,
    v_audio_in_gate_sense: state.audioIn.gate,
    v_audio_in_threshold: state.audioIn.threshold,
    v_filter_shift: returnValue(state.filter.shift, [0, 1, 2, -1, -2]),
    v_filter_cutoff: state.filter.cutoff,
    v_filter_resonance: state.filter.resonance,
    v_filter_mod_source: returnValue(state.fcMod.source, [
      '---',
      'Amp EG',
      'LFO 1',
      'LFO 2',
      'Velocity',
      'Keyboard Track',
      'Pitch Bend',
      'Mod Wheel',
    ]),
    v_filter_intensity: state.fcMod.intensity,
    v_filter_e_f_sense: state.filter.efSense,
    v_amp_level: state.amp.ampLevel,
    v_amp_direct_level: state.amp.directLevel,
    v_amp_distortion: state.amp.distortion,
    v_amp_vel_sense: state.unused.ampVelSense,
    v_amp_key_track: state.amp.keyTrack,
    v_eg_1_attack: state.eg1.attack,
    v_eg_1_decay: state.eg1.decay,
    v_eg_1_sustain: state.eg1.sustain,
    v_eg_1_release: state.eg1.release,
    v_eg_2_attack: state.unused.eg2attack,
    v_eg_2_decay: state.unused.eg2decay,
    v_eg_2_sustain: state.unused.eg2sustain,
    v_eg_2_release: state.unused.eg2release,
    v_lfo_1_key_sync: returnValue(state.lfo1.keySync, [
      'Off',
      'Timbre',
      'Voice',
    ]),
    v_lfo_1_wave: returnValue(state.lfo1.waveform, [
      'Saw',
      'Square 1',
      'Triangle',
      'Sample & Hold',
    ]),
    v_lfo_1_frequency: state.lfo1.frequency,
    v_lfo_1_tempo_sync: state.lfo1.tempoSync,
    v_lfo_1_sync_note: state.lfo1.syncNote,
    v_lfo_2_key_sync: returnValue(state.lfo2.keySync, [
      'Off',
      'Timbre',
      'Voice',
    ]),
    v_lfo_2_wave: returnValue(state.lfo2.waveform, [
      'Saw',
      'Square 2',
      'Sine',
      'Sample & Hold',
    ]),
    v_lfo_2_frequency: state.lfo2.frequency,
    v_lfo_2_tempo_sync: state.lfo2.tempoSync,
    v_lfo_2_sync_note: state.lfo2.syncNote,
    v_level_1: state.levels.level1,
    v_level_2: state.levels.level2,
    v_level_3: state.levels.level3,
    v_level_4: state.levels.level4,
    v_level_5: state.levels.level5,
    v_level_6: state.levels.level6,
    v_level_7: state.levels.level7,
    v_level_8: state.levels.level8,
    v_pan_1: state.pans.pan1 + 64,
    v_pan_2: state.pans.pan2 + 64,
    v_pan_3: state.pans.pan3 + 64,
    v_pan_4: state.pans.pan4 + 64,
    v_pan_5: state.pans.pan5 + 64,
    v_pan_6: state.pans.pan6 + 64,
    v_pan_7: state.pans.pan7 + 64,
    v_pan_8: state.pans.pan8 + 64,
  };
}
